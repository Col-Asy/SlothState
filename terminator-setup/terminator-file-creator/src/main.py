import sys
import os
import time
import subprocess
import atexit
import tempfile
import shutil
from tkinter import Tk, Label, Entry, Button, filedialog, messagebox
from desktop_use import DesktopUseClient, ApiError

class ServerManager:
    """Manages Terminator server lifecycle"""
    def __init__(self):
        self.server_process = None
        self.temp_dir = tempfile.TemporaryDirectory()
        self.server_path = os.path.join(self.temp_dir.name, 'server.exe')

        # Extract bundled server
        if getattr(sys, 'frozen', False):
            bundle_dir = sys._MEIPASS
        else:
            bundle_dir = os.path.dirname(os.path.abspath(__file__))
            
        src_server = os.path.join(bundle_dir, 'server.exe')
        shutil.copyfile(src_server, self.server_path)

    def start(self):
        """Start the server"""
        self.server_process = subprocess.Popen(
            [self.server_path, "--port", "9375"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            creationflags=subprocess.CREATE_NO_WINDOW
        )
        atexit.register(self.stop)

    def stop(self):
        """Stop the server and clean up"""
        if self.server_process:
            self.server_process.terminate()
        self.temp_dir.cleanup()

class FileCreatorApp:
    """Main application GUI and logic"""
    def __init__(self):
        self.server = ServerManager()
        self.root = Tk()
        self.root.title("File Creator")
        
        # GUI Elements
        Label(self.root, text="File Name:").grid(row=0, padx=5, pady=5)
        self.filename = Entry(self.root)
        self.filename.insert(0, "myfile.txt")
        self.filename.grid(row=0, column=1, padx=5, pady=5)
        
        Button(self.root, text="Create File", command=self.create_file).grid(row=2, columnspan=3, pady=10)

    def validate_inputs(self):
        """Check for valid user input"""
        if not self.filename.get().strip():
            messagebox.showerror("Error", "Filename cannot be empty!")
            return False
        return True

    def create_file(self):
        """Main automation workflow"""
        if not self.validate_inputs():
            return

        try:
            self.server.start()
            client = DesktopUseClient("http://127.0.0.1:9375")
            
            # Open Notepad
            client.open_application("notepad")
            
            # Get Notepad window
            notepad_window = client.locator('window:"*Notepad*"').expect_visible(timeout=10)
            
            # Type content
            editor = notepad_window.locator('role:Edit')
            editor.type_text("Automatically generated by Terminator\n\n")
            
            # Trigger save
            editor.press_key("{Ctrl}s")
            time.sleep(1)  # Wait for save dialog
            
            # 4. Open Save As dialog
            print("Opening Save As dialog...")
            editor.press_key("{Ctrl}s")

            # 5. Locate Save As dialog and type name in filename field
            print("Filling Save As dialog...")
            filename = self.filename.get().strip()
            save_dialog = client.locator('class:Edit').type_text(filename) [1]

            time.sleep(2)  # Wait for the text to be typed

            # Code to wait till the user clicks the save button

            messagebox.showinfo("Success", "File created successfully!")

        except ApiError as e:
            messagebox.showerror("Automation Error", str(e))
        except Exception as e:
            messagebox.showerror("Error", f"Unexpected error: {str(e)}")
        finally:
            self.root.destroy()

if __name__ == "__main__":
    app = FileCreatorApp()
    app.root.mainloop()
